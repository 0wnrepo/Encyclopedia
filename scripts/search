#!/usr/bin/env python
import logging
import os
import sys

from whoosh.fields import Schema, TEXT, KEYWORD
from whoosh.index import create_in, exists_in, open_dir
from whoosh.qparser import MultifieldParser

INDEX_PATH = '.index'
SCHEMA = Schema(title=TEXT(stored=True),
                content=TEXT(stored=True),
                tags=KEYWORD)

class Document(object):
    def __init__(self, title, content, tags=None):
        self.title = title
        self.content = content
        self.tags = tags or []

def get_index(path, schema):
    """Get or create an Index."""
    if not os.path.exists(path):
        os.mkdir(path)
    return create_in(path, schema)
    if exists_in(path):
        print "retrieved existing index..."
        return open_dir(path)
    else:
        print "made new index..."
        return create_in(path, schema)




def write(ix, documents):
    writer = ix.writer()
    for document in documents:
        title = unicode(document.title)
        content = unicode(document.content)
        logging.info("writing %s..." % title)
        writer.add_document(title=title,
                            content=content)
    logging.info("committed files...")
    writer.commit()

def gen_documents():
    for dirpath, _, filenames in os.walk("src"):
        for filename in filenames:
            logging.info("found: %s." % filename)
            if not filename.startswith("."):
                filepath = os.path.join(dirpath, filename)
                with open(filepath, 'rU') as f:
                    yield Document(title=filepath, content=f.read())


def search(ix, q):
    # TODO: This is a weird API. It's not ideal to have to pass ix.
    logging.info("searching: %s..." % q)
    with ix.searcher() as searcher:
        results = searcher.search(q)
        print "Found %s results:\n" % len(results)
        for result in results:
            print result["title"]

if __name__ == "__main__":
    # logging.basicConfig(level=logging.INFO)
    querystring = " ".join(sys.argv[1:])
    ix = get_index(INDEX_PATH, SCHEMA)
    write(ix, gen_documents())

    q = MultifieldParser(["title", "content"], ix.schema).parse(querystring)
    search(ix, q)
