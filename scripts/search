#!/usr/bin/env python
import logging
import os
import sys
import unicodedata

from whoosh.fields import Schema, TEXT, KEYWORD
from whoosh.index import create_in, exists_in, open_dir
from whoosh.qparser import MultifieldParser

INDEX_PATH = '.index'
SCHEMA = Schema(title=TEXT(stored=True),
                content=TEXT(stored=True),
                tags=KEYWORD)


class Document(object):
    def __init__(self, title, content, tags=None):
        self.title = title
        self.content = content
        self.tags = tags or []


def get_index(path, schema):
    """Get or create an Index."""
    if not os.path.exists(path):
        os.mkdir(path)
    if exists_in(path):
        print("retrieved existing index...")
        return open_dir(path)
    else:
        print("made new index...")
        return create_in(path, schema)


def decode(text, encoding="UTF-8"):
    """
    Encode a Unicode string as ascii, ignoring any errors.
    """
    unistr = text.decode(encoding)
    form = unicodedata.normalize('NFKD', unistr)
    return form.encode('ascii', 'ignore')


def write(index, documents):
    writer = index.writer()
    for document in documents:
        title = unicode(document.title)
        try:
            content = unicode(document.content)
        except UnicodeDecodeError:
            content = unicode(decode(document.content))
        writer.add_document(title=title, content=content)
    writer.commit()


def gen_documents():
    for dirpath, _, filenames in os.walk("src"):
        for filename in filenames:
            logging.debug("found: %s." % filename)
            if not filename.startswith("."):
                filepath = os.path.join(dirpath, filename)
                with open(filepath, 'rU') as f:
                    yield Document(title=filepath, content=f.read())


def gen_results(index, q):
    with index.searcher(closereader=False) as searcher:
        results = searcher.search(q)
        for result in results:
            yield result


def search(index, querystring):
    q = MultifieldParser(["title", "content"], index.schema).parse(querystring)
    return gen_results(index, q)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    index = get_index(INDEX_PATH, SCHEMA)
    querystring = " ".join(sys.argv[1:])
    # write(index, gen_documents())
    results = list(search(index, querystring))
    print "Found %s results:\n" % len(results)
    for result in results:
        print result["title"]
